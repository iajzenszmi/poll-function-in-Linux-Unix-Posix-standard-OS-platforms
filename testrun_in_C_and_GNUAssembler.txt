ian@ian-Latitude-E7440:~$ gcc polla.c -o polla
ian@ian-Latitude-E7440:~$ ./polla
7
Read: 7

ian@ian-Latitude-E7440:~$ cat polla.c
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <poll.h>

#define TIMEOUT 5 // Time in seconds to wait

int main(void) {
    struct pollfd fds[1];
    int ret;

    // Set up the pollfd structure
    fds[0].fd = STDIN_FILENO; // Standard input
    fds[0].events = POLLIN;   // Check for input

    // Wait for up to TIMEOUT seconds for input
    ret = poll(fds, 1, TIMEOUT * 1000);

    if (ret == -1) {
        perror("poll");
        return 1;
    }

    if (!ret) {
        printf("%d seconds elapsed.\n", TIMEOUT);
        return 0;
    }

    if (fds[0].revents & POLLIN) {
        char buf[1024];
        int len = read(STDIN_FILENO, buf, sizeof(buf));
        if (len == -1) {
            perror("read");
            return 1;
        }

        if (len) {
            buf[len] = '\0';
            printf("Read: %s\n", buf);
        }

        return 0;
    }

    fprintf(stderr, "Unexpected condition.\n");
    return 1;
}
ian@ian-Latitude-E7440:~$ sloccount polla.c
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/polla.c to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
35      top_dir         ansic=35


Totals grouped by language (dominant language first):
ansic:           35 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 35
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.07)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.08 (0.92)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.08
Total Estimated Cost to Develop                           = $ 800
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Latitude-E7440:~$ gcc polla.c -S
ian@ian-Latitude-E7440:~$ gcc polla.s -o pollas
ian@ian-Latitude-E7440:~$ ./pollas
7
Read: 7

ian@ian-Latitude-E7440:~$ sloccount polla.s
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/polla.s to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
127     top_dir         asm=127


Totals grouped by language (dominant language first):
asm:            127 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 127
Development Effort Estimate, Person-Years (Person-Months) = 0.02 (0.27)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.13 (1.53)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.18
Total Estimated Cost to Develop                           = $ 3,095
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Latitude-E7440:~$ cat sloccount.s
cat: sloccount.s: No such file or directory
ian@ian-Latitude-E7440:~$ cat polla.s
	.file	"polla.c"
	.text
	.section	.rodata
.LC0:
	.string	"poll"
.LC1:
	.string	"%d seconds elapsed.\n"
.LC2:
	.string	"read"
.LC3:
	.string	"Read: %s\n"
.LC4:
	.string	"Unexpected condition.\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB6:
	.cfi_startproc
	endbr64
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$1056, %rsp
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
	xorl	%eax, %eax
	movl	$0, -1048(%rbp)
	movw	$1, -1044(%rbp)
	leaq	-1048(%rbp), %rax
	movl	$5000, %edx
	movl	$1, %esi
	movq	%rax, %rdi
	call	poll@PLT
	movl	%eax, -1056(%rbp)
	cmpl	$-1, -1056(%rbp)
	jne	.L2
	leaq	.LC0(%rip), %rax
	movq	%rax, %rdi
	call	perror@PLT
	movl	$1, %eax
	jmp	.L9
.L2:
	cmpl	$0, -1056(%rbp)
	jne	.L4
	movl	$5, %esi
	leaq	.LC1(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
	movl	$0, %eax
	jmp	.L9
.L4:
	movzwl	-1042(%rbp), %eax
	cwtl
	andl	$1, %eax
	testl	%eax, %eax
	je	.L5
	leaq	-1040(%rbp), %rax
	movl	$1024, %edx
	movq	%rax, %rsi
	movl	$0, %edi
	call	read@PLT
	movl	%eax, -1052(%rbp)
	cmpl	$-1, -1052(%rbp)
	jne	.L6
	leaq	.LC2(%rip), %rax
	movq	%rax, %rdi
	call	perror@PLT
	movl	$1, %eax
	jmp	.L9
.L6:
	cmpl	$0, -1052(%rbp)
	je	.L8
	movl	-1052(%rbp), %eax
	cltq
	movb	$0, -1040(%rbp,%rax)
	leaq	-1040(%rbp), %rax
	movq	%rax, %rsi
	leaq	.LC3(%rip), %rax
	movq	%rax, %rdi
	movl	$0, %eax
	call	printf@PLT
.L8:
	movl	$0, %eax
	jmp	.L9
.L5:
	movq	stderr(%rip), %rax
	movq	%rax, %rcx
	movl	$22, %edx
	movl	$1, %esi
	leaq	.LC4(%rip), %rax
	movq	%rax, %rdi
	call	fwrite@PLT
	movl	$1, %eax
.L9:
	movq	-8(%rbp), %rdx
	subq	%fs:40, %rdx
	je	.L10
	call	__stack_chk_fail@PLT
.L10:
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE6:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0"
	.section	.note.GNU-stack,"",@progbits
	.section	.note.gnu.property,"a"
	.align 8
	.long	1f - 0f
	.long	4f - 1f
	.long	5
0:
	.string	"GNU"
1:
	.align 8
	.long	0xc0000002
	.long	3f - 2f
2:
	.long	0x3
3:
	.align 8
4:
ian@ian-Latitude-E7440:~$ 

